# Hyperparameters follow the classic Nature DQN, but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
import dopamine.discrete_domains.atari_lib
import dopamine.discrete_domains.run_experiment
import dopamine.jax.agents.dqn.dqn_agent
import dopamine.jax.replay_memory.replay_buffer
import metric_dqn_bper_agent

JaxDQNAgent.gamma = 0.99
JaxDQNAgent.update_horizon = 1
JaxDQNAgent.min_replay_history = 100  # agent steps
JaxDQNAgent.update_period = 4
JaxDQNAgent.target_update_period = 8_000  # agent steps
JaxDQNAgent.epsilon_train = 0.01
JaxDQNAgent.epsilon_eval = 0.001
JaxDQNAgent.epsilon_decay_period = 250_000  # agent steps
MetricDQNBPERAgent.replay_scheme = 'prioritized'
MetricDQNBPERAgent.bper_weight = 1 # BPER

# Note: We are using the Adam optimizer by default for JaxDQN, which differs
#       from the original NatureDQN and the dopamine TensorFlow version. In
#       the experiments we have ran, we have found that using Adam yields
#       improved training performance.
JaxDQNAgent.optimizer = 'adam'
create_optimizer.learning_rate = 6.25e-5
create_optimizer.eps = 1.5e-4

atari_lib.create_atari_environment.game_name = 'Pong'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
create_runner.schedule = 'continuous_train'
create_metric_agent.debug_mode = True
Runner.num_iterations = 5
Runner.training_steps = 1_000  # agent steps
Runner.evaluation_steps = 1_000  # agent steps
Runner.max_steps_per_episode = 27_000  # agent steps

ReplayBuffer.max_capacity = 1_000_000
PrioritizedSamplingDistribution.max_capacity = 1_000_000
ReplayBuffer.batch_size = 32
